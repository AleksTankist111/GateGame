+ 1) Источник и приемник сигнала - это дети Pipe
+ 2) Pipe.set должен брать не True/False, а другой Pipe. Таким образом, это рекурсивное объявление.
+ 3) Pipe.get должен выдавать True/False.
+ *8) ИСТОЧНИКИ. Должны содержать список ссылок на всех, кто к ним привязан.(удобно для замены и не требует много памяти)
+ *9) СТОКИ. Добавлен метод state, == get. Для совместимости.
+ *11) Создать функцию set(p1,p2,p3...) для множественного присваивания пайпов инпутам    <----- ПЛОХАЯ ИДЕЯ. КОГДА ИНПУТОВ>1 НЕПОНЯТНО, КУДА ПРИСВАИВАТЬ
+ *12) Замкнутый Гейт реализовать.
+14) Создать абстрактуню функцию copy внутри Gate, чтобы создавать копии объекта
+15) Создать функцию "set_name" для Gate, чтобы менять имя
+16) Реализовать класс "board", методы +save, +load, -add_.... В список saved_modules добавить по умолчанию 4 объекта:
    and, not, source, sink. Сделать их неудаляемыми из списка.
+17) Реализовать функцию delete_save - удалить сохранение из списка.
+18) Превратить список элементов board в словарь по именам ?
+19) Реализовать функцию вывода всех доступных имен
+4) Сложные гейты создаются В ОТДЕЛЬНОМ ОКНЕ, С ИСТОЧНИКАМИ И ПРИЕМНИКАМИ.
+5) Сложный гейт Принимает набор гейтов при создании.
+6) Инициализация инпутов:
	Взять все источники из списка источников. Заменить их на pipe.
+7) Инициализация оутпутов:
	Взять все стоки из списка стоков. Заменить их на pipe.(контейнер)
- 10) Добавить список ссылок на связанные элементы ко всем Pipes

13) создать класс "задача\уровень" для проверки тест кейсов
20) добавить в board функцию "выгрузить класс (load)" для выгрузки на поле прежде созданного гейта (не НЕ и не И)
21) Создать "сохранение состояния"
22) Оставить имена, но добавить id, чтобы искать по ним
23) ЗАПРЕТИТЬ СОЕДИНЯТЬ ВХОД С ВЫХОДОМ НАПРЯМУЮ (КОРОТКОЕ ЗАМЫКАНИЕ!)
+ 24) Добавить "add_user" и "del_user" в классы pipe и container
25) в load добавить превращение source-pips в Source
+ 26) удалить set у Gate



